1. Estimated running times (in big-theta notation):
function1: Theta(__N^2__)
function2: Theta(__N__)
function3: Theta(__N^3__)

Data:
               n         time
function1:   10,000     0.237 s
             20,000      0.9 s
             50,000     5.957 s
            100,000     23.03 s



function2:  100,000      0.014 s
             10^8        0.476 s
             10^9        5.069 s
            2 * 10^9    10.258 s




function3:   100         0.02 s
             500         0.933 s
            1000         7.445 s
            2000         57.12 s




Experimentally determined running time, assuming runtime is of the form ~aN^b:

function1: ~_(4.095 * 10^-9)_N^_1.95_
function2: ~_(3.564 * 10^-9)_N^_1.0170_
function3: ~_(1.129 * 10^-8)_N^_2.9397_

2. Data:
                              n             time
function4:                2147483647       0.002 s
                         68720001023       0.006 s
                         200560490131      0.008 s
                        70368760954879     0.102 s
                        688846502588399    0.298 s



function5 (best case):      500            0.871 s
                          100,000          1.932 s
                           10^9            4.129 s
                          2 * 10^9         4.313 s



function5 (worst case):     63             4.689 s
                            125            7.092 s
                            251           12.161 s
                            501           21.961 s





3. Data:
                              n         time
ArrayList:                  5000       0.032 s
                           50,000      1.601 s
                           100,000     6.77 s
                           200,000    33.739 s




HashSet:                   5000        0.02 s
                           10^6        0.381 s
                          2 * 10^6     2.298 s
                          4 * 10^6     5.178 s
                          5 * 10^6     6.753 s
                           10^7        15.787 s        





Experimentally determined running time:

ArrayList: O(N^2.317) (approximately O(N^2))
HashSet: O(N^0.8779) (approximately O(N))

4. Data:
                                       n         time
Insertion sort with array list:      5000       0.03 s
                                    25,000      0.397 s
                                    50,000      1.802 s
                                    100,000     8.871 s
                                    200,000    75.436 s    


Insertion sort with linked list:    625         0.104 s
                                    1000       0.415 s
                                    1250       0.806 s
                                    2000       3.355 s
                                    2500       6.736 s    
                                    5000       59.862 s


/* My guess in why the run times are so different is that ArrayList is an array, so it's really easy to like boop in and remove all the things.
Whereas for linked lists, ya gotta like follow all the pointers, along this winding path, and that takes time.
Maybe? Yeah? */



Experimentally determined running time:

Insertion sort with array:        O(_N^3.088__) (approximately O(N^3))
Insertion sort with linked list:  O(_N^3.152__) (approximately O(N^3))

5. Initial guess: O(__N^2_)

Data:             n               time
                 5000            0.004 s
                50,000           0.007 s
                 10^6            0.25 s
                2 * 10^6         0.722 s
                4 * 10^6         2.08 s
                8 * 10^6         5.886 s
                1.6 * 10^7       16.61 s                        


Experimentally determined running time: O(__N^1.4967_) (approximately O(N^1.5))

/* My guess for why it's N^1.5:
    * According to my professional fantastic graph/line-drawing skills, it's kinda like summing n-i^2 for each iteration of the outerloop.
    * So then, the only, like, important, contributing stuff is for the smaller is, like i <= sqrt(n), kinda?
    * So then it's kinda like sqrt(n) * (n - stuff), which is like n^1.5. Maybe. Yeah?
*/


